// Generated by Haxe 3.4.2
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class PerfMeter : global::haxe.lang.HxObject {
		
		public PerfMeter(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public PerfMeter(string prefix, global::haxe.lang.Null<double> updateInterval, global::haxe.lang.Null<bool> writeToFile) {
			global::haxe.root.PerfMeter.__hx_ctor__PerfMeter(this, prefix, updateInterval, writeToFile);
		}
		
		
		public static void __hx_ctor__PerfMeter(global::haxe.root.PerfMeter __hx_this, string prefix, global::haxe.lang.Null<double> updateInterval, global::haxe.lang.Null<bool> writeToFile) {
			__hx_this.varianceAccu = 0.0;
			__hx_this.meanAccu = 0.0;
			__hx_this.timeAccu = 0.0;
			__hx_this.firstIterTime = 0.0;
			__hx_this.iterCount = 0;
			bool __temp_writeToFile11 = ( ( ! (writeToFile.hasValue) ) ? (true) : ((writeToFile).@value) );
			double __temp_updateInterval10 = ( ( ! (updateInterval.hasValue) ) ? (1.0) : ((updateInterval).@value) );
			__hx_this.prefix = prefix;
			__hx_this.updateInterval = __temp_updateInterval10;
			__hx_this.writeToFile = __temp_writeToFile11;
		}
		
		
		public static void main() {
			unchecked {
				double simulationTime = 30.0;
				global::haxe.root.PerfMeter pm = new global::haxe.root.PerfMeter("LocalTest", new global::haxe.lang.Null<double>(((double) (5) ), true), default(global::haxe.lang.Null<bool>));
				double startTime = global::haxe.root.Sys.time();
				while (true) {
					pm.iterStart();
					global::System.Threading.Thread.Sleep(((int) (((int) (( (( 0.1 + ( global::haxe.root.Math.rand.NextDouble() * 0.8 ) )) * 1000 )) )) ));
					double after = global::haxe.root.Sys.time();
					pm.iterEnd();
					if (( ( global::haxe.root.Sys.time() - startTime ) > simulationTime )) {
						break;
					}
					
				}
				
			}
		}
		
		
		public int iterCount;
		
		public double firstIterTime;
		
		public double iterTimeStart;
		
		public double updateInterval;
		
		public string prefix;
		
		public bool writeToFile;
		
		public virtual void iterStart() {
			this.iterTimeStart = global::haxe.root.Sys.time();
			if (( this.firstIterTime == 0.0 )) {
				this.firstIterTime = this.iterTimeStart;
			}
			
		}
		
		
		public double timeAccu;
		
		public double meanAccu;
		
		public double varianceAccu;
		
		public virtual void _accumulate(double sample) {
			this.timeAccu += sample;
			double delta = ( sample - this.meanAccu );
			this.meanAccu += ( delta / this.iterCount );
			this.varianceAccu += ( delta * (( sample - this.meanAccu )) );
		}
		
		
		public virtual void iterEnd() {
			unchecked {
				double now = global::haxe.root.Sys.time();
				double iterDuration = ( now - this.iterTimeStart );
				this.iterCount += 1;
				this._accumulate(iterDuration);
				double elapsed = ( now - this.firstIterTime );
				if (( elapsed > this.updateInterval )) {
					double SD = global::System.Math.Sqrt(((double) (this.varianceAccu /= ((double) (( this.iterCount - 1 )) )) ));
					double mean = ( this.timeAccu / this.iterCount );
					string summary = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("PerfMeter ", this.prefix), " Report: Iterations="), global::haxe.lang.Runtime.toString(this.iterCount)), "\tTotal time="), global::haxe.lang.Runtime.toString(this.timeAccu)), "\tMean (gross)="), global::haxe.lang.Runtime.toString(mean)), "\tMean (accu)="), global::haxe.lang.Runtime.toString(this.meanAccu)), "\tVar="), global::haxe.lang.Runtime.toString(this.varianceAccu)), "\tSD="), global::haxe.lang.Runtime.toString(SD));
					global::haxe.Log.trace.__hx_invoke2_o(default(double), summary, default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"iterEnd", "PerfMeter", "PerfMeter.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
					if (this.writeToFile) {
						string filename = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("PerfMeter-", this.prefix), "-"), global::haxe.lang.Runtime.toString(now)), ".txt");
						global::sys.io.FileOutput fout = global::sys.io.File.write(filename, new global::haxe.lang.Null<bool>(false, true));
						fout.writeString(summary);
						fout.flush();
						fout.close();
					}
					
					this.firstIterTime = ((double) (0) );
					this.iterCount = 0;
					this.timeAccu = ((double) (0) );
					this.meanAccu = ((double) (0) );
					this.varianceAccu = ((double) (0) );
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 991331877:
					{
						this.varianceAccu = ((double) (@value) );
						return @value;
					}
					
					
					case 208049401:
					{
						this.meanAccu = ((double) (@value) );
						return @value;
					}
					
					
					case 1623894721:
					{
						this.timeAccu = ((double) (@value) );
						return @value;
					}
					
					
					case 1571187822:
					{
						this.updateInterval = ((double) (@value) );
						return @value;
					}
					
					
					case 980025565:
					{
						this.iterTimeStart = ((double) (@value) );
						return @value;
					}
					
					
					case 12914069:
					{
						this.firstIterTime = ((double) (@value) );
						return @value;
					}
					
					
					case 1243052183:
					{
						this.iterCount = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 991331877:
					{
						this.varianceAccu = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 208049401:
					{
						this.meanAccu = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1623894721:
					{
						this.timeAccu = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 242125782:
					{
						this.writeToFile = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 783735186:
					{
						this.prefix = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1571187822:
					{
						this.updateInterval = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 980025565:
					{
						this.iterTimeStart = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 12914069:
					{
						this.firstIterTime = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1243052183:
					{
						this.iterCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1656436131:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "iterEnd", 1656436131)) );
					}
					
					
					case 476281537:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "_accumulate", 476281537)) );
					}
					
					
					case 991331877:
					{
						return this.varianceAccu;
					}
					
					
					case 208049401:
					{
						return this.meanAccu;
					}
					
					
					case 1623894721:
					{
						return this.timeAccu;
					}
					
					
					case 62892074:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "iterStart", 62892074)) );
					}
					
					
					case 242125782:
					{
						return this.writeToFile;
					}
					
					
					case 783735186:
					{
						return this.prefix;
					}
					
					
					case 1571187822:
					{
						return this.updateInterval;
					}
					
					
					case 980025565:
					{
						return this.iterTimeStart;
					}
					
					
					case 12914069:
					{
						return this.firstIterTime;
					}
					
					
					case 1243052183:
					{
						return this.iterCount;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 991331877:
					{
						return this.varianceAccu;
					}
					
					
					case 208049401:
					{
						return this.meanAccu;
					}
					
					
					case 1623894721:
					{
						return this.timeAccu;
					}
					
					
					case 1571187822:
					{
						return this.updateInterval;
					}
					
					
					case 980025565:
					{
						return this.iterTimeStart;
					}
					
					
					case 12914069:
					{
						return this.firstIterTime;
					}
					
					
					case 1243052183:
					{
						return ((double) (this.iterCount) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::haxe.root.Array dynargs) {
			unchecked {
				switch (hash) {
					case 1656436131:
					{
						this.iterEnd();
						break;
					}
					
					
					case 476281537:
					{
						this._accumulate(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
						break;
					}
					
					
					case 62892074:
					{
						this.iterStart();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<object> baseArr) {
			baseArr.push("varianceAccu");
			baseArr.push("meanAccu");
			baseArr.push("timeAccu");
			baseArr.push("writeToFile");
			baseArr.push("prefix");
			baseArr.push("updateInterval");
			baseArr.push("iterTimeStart");
			baseArr.push("firstIterTime");
			baseArr.push("iterCount");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


